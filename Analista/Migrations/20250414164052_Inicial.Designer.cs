// <auto-generated />
using System;
using Analista.Persintencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Analista.Migrations
{
    [DbContext(typeof(MiDbContext))]
    [Migration("20250414164052_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Analista.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Actores");
                });

            modelBuilder.Entity("Analista.Models.ActorPorCasoDeUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCasoDeUso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCondicion")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("IdCasoDeUso");

                    b.ToTable("ActoresPorCasosDeUso");
                });

            modelBuilder.Entity("Analista.Models.CasoDeUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CasosDeUso");
                });

            modelBuilder.Entity("Analista.Models.Condicion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Condiciones");
                });

            modelBuilder.Entity("Analista.Models.CondicionPorCasoDeUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCasoDeUso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCondicion")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCasoDeUso");

                    b.HasIndex("IdCondicion");

                    b.ToTable("CondicionesPorCasosDeUso");
                });

            modelBuilder.Entity("Analista.Models.CriterioDeAceptacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("CriteriosDeAceptacion");
                });

            modelBuilder.Entity("Analista.Models.CriterioDeAceptacionPorCasoDeUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCasoDeUso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCriterioDeAceptacion")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdCasoDeUso");

                    b.HasIndex("IdCriterioDeAceptacion");

                    b.ToTable("CriteriodDeAceptacionPorCasoDeUso");
                });

            modelBuilder.Entity("Analista.Models.Requisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdSubTipoRequisito")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<Guid>("subTipoRequisitoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("subTipoRequisitoId");

                    b.ToTable("Requisitos");
                });

            modelBuilder.Entity("Analista.Models.RequisitoPorCasoDeUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCasoDeUso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRequisito")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdCasoDeUso");

                    b.HasIndex("IdRequisito");

                    b.ToTable("RequisitosPorCasosDeUso");
                });

            modelBuilder.Entity("Analista.Models.Servicio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Analista.Models.ServiciosPorCasoDeUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCasoDeUso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdServicio")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IdCasoDeUso");

                    b.HasIndex("IdServicio");

                    b.ToTable("ServiciosPorCasosDeUso");
                });

            modelBuilder.Entity("Analista.Models.SubTipoRequisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdTipoRequisito")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoRequisito");

                    b.ToTable("SubTiposRequisito");
                });

            modelBuilder.Entity("Analista.Models.TipoRequisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TiposRequisito");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Activo = true,
                            FechaCreacion = new DateTime(2024, 4, 10, 14, 30, 0, 0, DateTimeKind.Utc),
                            Nombre = "Requisito No Funcional",
                            Orden = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Activo = true,
                            FechaCreacion = new DateTime(2024, 4, 10, 14, 30, 0, 0, DateTimeKind.Utc),
                            Nombre = "Requisito Funcional",
                            Orden = 2
                        });
                });

            modelBuilder.Entity("Analista.Models.ActorPorCasoDeUso", b =>
                {
                    b.HasOne("Analista.Models.Actor", "Actor")
                        .WithMany("ActorPorCasosDeUso")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.CasoDeUso", "CasoDeUso")
                        .WithMany("ActoresPorCasoDeUso")
                        .HasForeignKey("IdCasoDeUso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("CasoDeUso");
                });

            modelBuilder.Entity("Analista.Models.CondicionPorCasoDeUso", b =>
                {
                    b.HasOne("Analista.Models.CasoDeUso", "CasoDeUso")
                        .WithMany("CondicionesPorCasoDeUso")
                        .HasForeignKey("IdCasoDeUso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.Condicion", "Condicion")
                        .WithMany("CondicionPorCasoDeUso")
                        .HasForeignKey("IdCondicion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasoDeUso");

                    b.Navigation("Condicion");
                });

            modelBuilder.Entity("Analista.Models.CriterioDeAceptacionPorCasoDeUso", b =>
                {
                    b.HasOne("Analista.Models.CasoDeUso", "CasoDeUso")
                        .WithMany("CriteriosDeAceptacionPorCasoDeUso")
                        .HasForeignKey("IdCasoDeUso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.CriterioDeAceptacion", "CriterioDeAceptacion")
                        .WithMany("CriterioDeAceptacionPorCasoDeUsos")
                        .HasForeignKey("IdCriterioDeAceptacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasoDeUso");

                    b.Navigation("CriterioDeAceptacion");
                });

            modelBuilder.Entity("Analista.Models.Requisito", b =>
                {
                    b.HasOne("Analista.Models.SubTipoRequisito", "subTipoRequisito")
                        .WithMany("Requisitos")
                        .HasForeignKey("subTipoRequisitoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subTipoRequisito");
                });

            modelBuilder.Entity("Analista.Models.RequisitoPorCasoDeUso", b =>
                {
                    b.HasOne("Analista.Models.CasoDeUso", "CasoDeUso")
                        .WithMany("RequisitoPorCasoDeUso")
                        .HasForeignKey("IdCasoDeUso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.Requisito", "Requisito")
                        .WithMany()
                        .HasForeignKey("IdRequisito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasoDeUso");

                    b.Navigation("Requisito");
                });

            modelBuilder.Entity("Analista.Models.ServiciosPorCasoDeUso", b =>
                {
                    b.HasOne("Analista.Models.CasoDeUso", "CasoDeUso")
                        .WithMany("ServiciosPorCasoDeUso")
                        .HasForeignKey("IdCasoDeUso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.Servicio", "Servicio")
                        .WithMany("serviciosPorCasoDeUso")
                        .HasForeignKey("IdServicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasoDeUso");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Analista.Models.SubTipoRequisito", b =>
                {
                    b.HasOne("Analista.Models.TipoRequisito", "TipoRequisito")
                        .WithMany("SubTiposRequisitos")
                        .HasForeignKey("IdTipoRequisito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoRequisito");
                });

            modelBuilder.Entity("Analista.Models.Actor", b =>
                {
                    b.Navigation("ActorPorCasosDeUso");
                });

            modelBuilder.Entity("Analista.Models.CasoDeUso", b =>
                {
                    b.Navigation("ActoresPorCasoDeUso");

                    b.Navigation("CondicionesPorCasoDeUso");

                    b.Navigation("CriteriosDeAceptacionPorCasoDeUso");

                    b.Navigation("RequisitoPorCasoDeUso");

                    b.Navigation("ServiciosPorCasoDeUso");
                });

            modelBuilder.Entity("Analista.Models.Condicion", b =>
                {
                    b.Navigation("CondicionPorCasoDeUso");
                });

            modelBuilder.Entity("Analista.Models.CriterioDeAceptacion", b =>
                {
                    b.Navigation("CriterioDeAceptacionPorCasoDeUsos");
                });

            modelBuilder.Entity("Analista.Models.Servicio", b =>
                {
                    b.Navigation("serviciosPorCasoDeUso");
                });

            modelBuilder.Entity("Analista.Models.SubTipoRequisito", b =>
                {
                    b.Navigation("Requisitos");
                });

            modelBuilder.Entity("Analista.Models.TipoRequisito", b =>
                {
                    b.Navigation("SubTiposRequisitos");
                });
#pragma warning restore 612, 618
        }
    }
}
