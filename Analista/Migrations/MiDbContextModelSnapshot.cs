// <auto-generated />
using System;
using Analista.Persintencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Analista.Migrations
{
    [DbContext(typeof(MiDbContext))]
    partial class MiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActorCasoDeUso", b =>
                {
                    b.Property<Guid>("ActorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CasoDeUsoId")
                        .HasColumnType("uuid");

                    b.HasKey("ActorId", "CasoDeUsoId");

                    b.HasIndex("CasoDeUsoId");

                    b.ToTable("ActoresPorCasoDeUso", (string)null);
                });

            modelBuilder.Entity("Analista.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Actores", (string)null);
                });

            modelBuilder.Entity("Analista.Models.CasoDeUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CasosDeUso", (string)null);
                });

            modelBuilder.Entity("Analista.Models.Condicion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Condiciones", (string)null);
                });

            modelBuilder.Entity("Analista.Models.CondicionPorCasoDeUso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCasoDeUso")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdCondicion")
                        .HasColumnType("uuid");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCasoDeUso");

                    b.HasIndex("IdCondicion");

                    b.ToTable("CondicionesPorCasosDeUso", (string)null);
                });

            modelBuilder.Entity("Analista.Models.CriterioDeAceptacion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("CriteriosDeAceptacion", (string)null);
                });

            modelBuilder.Entity("Analista.Models.Requisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdSubTipoRequisito")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdSubTipoRequisito");

                    b.ToTable("Requisitos", (string)null);
                });

            modelBuilder.Entity("Analista.Models.Servicio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Servicios", (string)null);
                });

            modelBuilder.Entity("Analista.Models.SubTipoRequisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdTipoRequisito")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdTipoRequisito");

                    b.ToTable("SubTiposRequisito", (string)null);
                });

            modelBuilder.Entity("Analista.Models.TipoRequisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TiposRequisito", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Activo = true,
                            FechaCreacion = new DateTime(2024, 4, 10, 14, 30, 0, 0, DateTimeKind.Utc),
                            Nombre = "Requisito No Funcional",
                            Orden = 1
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Activo = true,
                            FechaCreacion = new DateTime(2024, 4, 10, 14, 30, 0, 0, DateTimeKind.Utc),
                            Nombre = "Requisito Funcional",
                            Orden = 2
                        });
                });

            modelBuilder.Entity("CasoDeUsoCriterioDeAceptacion", b =>
                {
                    b.Property<Guid>("CasoDeUsoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CriterioDeAceptacionId")
                        .HasColumnType("uuid");

                    b.HasKey("CasoDeUsoId", "CriterioDeAceptacionId");

                    b.HasIndex("CriterioDeAceptacionId");

                    b.ToTable("CriteriosDeAceptacionPorCasoDeUso", (string)null);
                });

            modelBuilder.Entity("CasoDeUsoRequisito", b =>
                {
                    b.Property<Guid>("CasoDeUsoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequisitoId")
                        .HasColumnType("uuid");

                    b.HasKey("CasoDeUsoId", "RequisitoId");

                    b.HasIndex("RequisitoId");

                    b.ToTable("RequisitosPorCasoDeUso", (string)null);
                });

            modelBuilder.Entity("CasoDeUsoServicio", b =>
                {
                    b.Property<Guid>("CasoDeUsoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicioId")
                        .HasColumnType("uuid");

                    b.HasKey("CasoDeUsoId", "ServicioId");

                    b.HasIndex("ServicioId");

                    b.ToTable("ServiciosPorCasoDeUso", (string)null);
                });

            modelBuilder.Entity("ActorCasoDeUso", b =>
                {
                    b.HasOne("Analista.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.CasoDeUso", null)
                        .WithMany()
                        .HasForeignKey("CasoDeUsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Analista.Models.CondicionPorCasoDeUso", b =>
                {
                    b.HasOne("Analista.Models.CasoDeUso", "CasoDeUso")
                        .WithMany("CondicionPorCasoDeUso")
                        .HasForeignKey("IdCasoDeUso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.Condicion", "Condicion")
                        .WithMany("CondicionPorCasoDeUso")
                        .HasForeignKey("IdCondicion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CasoDeUso");

                    b.Navigation("Condicion");
                });

            modelBuilder.Entity("Analista.Models.Requisito", b =>
                {
                    b.HasOne("Analista.Models.SubTipoRequisito", "SubTipoRequisito")
                        .WithMany("Requisito")
                        .HasForeignKey("IdSubTipoRequisito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubTipoRequisito");
                });

            modelBuilder.Entity("Analista.Models.SubTipoRequisito", b =>
                {
                    b.HasOne("Analista.Models.TipoRequisito", "TipoRequisito")
                        .WithMany("SubTipoRequisito")
                        .HasForeignKey("IdTipoRequisito")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoRequisito");
                });

            modelBuilder.Entity("CasoDeUsoCriterioDeAceptacion", b =>
                {
                    b.HasOne("Analista.Models.CasoDeUso", null)
                        .WithMany()
                        .HasForeignKey("CasoDeUsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.CriterioDeAceptacion", null)
                        .WithMany()
                        .HasForeignKey("CriterioDeAceptacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CasoDeUsoRequisito", b =>
                {
                    b.HasOne("Analista.Models.CasoDeUso", null)
                        .WithMany()
                        .HasForeignKey("CasoDeUsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.Requisito", null)
                        .WithMany()
                        .HasForeignKey("RequisitoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CasoDeUsoServicio", b =>
                {
                    b.HasOne("Analista.Models.CasoDeUso", null)
                        .WithMany()
                        .HasForeignKey("CasoDeUsoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analista.Models.Servicio", null)
                        .WithMany()
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Analista.Models.CasoDeUso", b =>
                {
                    b.Navigation("CondicionPorCasoDeUso");
                });

            modelBuilder.Entity("Analista.Models.Condicion", b =>
                {
                    b.Navigation("CondicionPorCasoDeUso");
                });

            modelBuilder.Entity("Analista.Models.SubTipoRequisito", b =>
                {
                    b.Navigation("Requisito");
                });

            modelBuilder.Entity("Analista.Models.TipoRequisito", b =>
                {
                    b.Navigation("SubTipoRequisito");
                });
#pragma warning restore 612, 618
        }
    }
}
